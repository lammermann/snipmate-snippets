extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet vector "vector"
std::vector<${1:char}> ${2};
endsnippet

# Namespace
snippet ns "ns"
namespace ${1:`!v Filename('', 'my')`} {
	${2}
} /* namespace $1 */
endsnippet

# Class
snippet class "class"
class ${1:`!v Filename('$1_t', 'name')`}
{
public:
$1(${2:arguments});
virtual ~$1();
private:
${3:/* data */}
};
endsnippet

snippet fori "fori"
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:/* code */}
}
endsnippet

# auto iterator
snippet itera "itera"
for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
	${2:std::cout << *$1 << std::endl;}
}
endsnippet

# iterator
snippet iter "iter"
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet

# member function implementations
snippet mfun "mfun"
${4:void} ${1:`!v Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${5:return};
}
endsnippet

snippet scout "scout"
std::cout << ${1} << std::endl;
endsnippet

snippet cout "cout"
cout << ${1} << endl;
endsnippet

snippet scin "scin"
std::cin >> ${1};
endsnippet

snippet cin "cin"
cin >> ${1};
endsnippet

snippet readfile "readfile"
std::vector<char> v;
if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
char buf[1024];
while (size_t len = fread(buf, 1, sizeof(buf), $2))
v.insert(v.end(), buf, buf + len);
fclose($2);
}${3}
endsnippet

snippet map "map"
std::map<${1:key}, ${2:value}> map${3};
endsnippet
# vim:ft=snippets:
