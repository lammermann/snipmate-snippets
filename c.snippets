###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# main()
snippet main "main"
int main(int argc, const char *argv[])
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet #inc "include"
#include ${1:<${2:stdio.h}}`!p
def decide(text):
	if text.startswith('"'):
		return '"'
	return '>'

snip.rv=decide(t[1])
`$0
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif /* $1 */
endsnippet

snippet #def "#def"
#define ${1:SYMBOL} ${2:value}
endsnippet

snippet #ifdef "#ifdef"
#ifdef ${1:FOO}
${2:// code}
#endif /* $1 */
endsnippet

snippet #if "#if #endif" !b
#if ${1:FOO}
${VISUAL:code}$0
#endif /* $1 */
endsnippet

# Header Include-Guard
snippet once "Include header once only guard"
/**
* @file ${1:`!p snip.rv = snip.fn`}
*
* @brief ${3: TODO}
*
*/
#ifndef ${2:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = name.upper()
else:
    snip.rv = snip.c`}
#define $2

${0}

#endif /* $2 */
endsnippet

# If Condition
snippet if "if .. (if)"
if (${1:/* condition */})
{
	${0:/* code */}
}
endsnippet

snippet el "else"
else
{
	${1}
}
endsnippet

snippet ? "ternary conditional"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet do "do...while loop (do)"
do
{
	${0:/* code */}
} while (${1:/* condition */});
endsnippet

# While Loop
snippet wh "while"
while (${1:/* condition */})
{
	${2:/* code */}
}
endsnippet

snippet un "unsigned"
unsigned
endsnippet

# For Loop
snippet for "for int loop (fori)"
for (${2:i} = 0; $2 < ${1:count}; ${3:$2++})
{
	${0:/* code */}
}
endsnippet

# Custom For Loop
snippet forr "forr"
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
{
	${5:/* code */}
}
endsnippet

# Function
snippet fun "fun"
${1:void} ${2:function_name}(${3})
{
	${4:/* code */}
}
endsnippet

snippet fund "function declaration"
${1:void} ${2:function_name}(${3});${4}
endsnippet

snippet ty "typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

# Struct
snippet !st(ruct)?! "struct" br
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

# Typedef struct
snippet tds "typedef struct"
typedef struct ${2:_$1 }
{
	${3:/* data */}
} ${1:`!v Filename('$1_t', 'name')`};
endsnippet

# Typdef enum
snippet tde "tde"
typedef enum
{
	${2:/* data */}
} ${1:foo};
endsnippet

# This is kind of convenient
snippet . "."
[${1}]${2}
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

# printf
snippet !fpr(intf)?! "fprintf ..." br
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet !pr(intf)?! "printf .. (printf)" br
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# vim:ft=snippets:
