# main()
snippet main "main"
int main(int argc, const char *argv[])
{
	${1:/* code */}
	return 0;
}
endsnippet

snippet mainn "mainn"
int main(void)
{
	${1}
	return 0;
}
endsnippet

# #include <...>
snippet #inc "inc_global #1"
#include <${1:stdio}.h>${2}
endsnippet

# #include "..."
snippet #inc "inc #2"
#include "${1:`!v Filename("$1.h")`}"${2}
endsnippet

# #ifndef ... #define ... #endif
snippet #ifndef "#ifndef"
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif${3}
endsnippet

snippet #def "#def"
#define ${1:SYMBOL} ${2:value}
endsnippet

snippet #ifdef "#ifdef"
#ifdef ${1:FOO}
${2:// code}
#endif /* $1 */
endsnippet

snippet #if "#if"
#if ${1:FOO}
${2:/* data */}
#endif
endsnippet

# Header Include-Guard
snippet once "once"
/**
* @file ${1:`!v Filename('', 'TODO')`}
*
* @brief ${3: TODO}
*
*/
#ifndef ${2:`!v toupper(Filename('', 'UNTITLED')).'_H'`}
#define $2

${4}

#endif /* $2 */
endsnippet

# If Condition
snippet if "if"
if (${1:/* condition */})
{
	${2:/* code */}
}
endsnippet

snippet el "el"
else
{
	${1}
}
endsnippet

# Ternary conditional
snippet t "t"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# Do While Loop
snippet do "do"
do
{
	${2:/* code */}
} while (${1:/* condition */});
endsnippet

# While Loop
snippet wh "wh"
while (${1:/* condition */})
{
	${2:/* code */}
}
endsnippet

snippet un "un"
unsigned
endsnippet

# For Loop
snippet for "for"
for (${2:i} = 0; $2 < ${1:count}; $2${3:++})
{
	${4:/* code */}
}
endsnippet

# Custom For Loop
snippet forr "forr"
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
{
	${5:/* code */}
}
endsnippet

# Function
snippet fun "fun"
${1:void} ${2:function_name}(${3})
{
	${4:/* code */}
}
endsnippet

# Function Declaration
snippet fund "fund"
${1:void} ${2:function_name}(${3});${4}
endsnippet

# Typedef
snippet td "td"
typedef ${1:int} ${2:MyCustomType};${3}
endsnippet

# Struct
snippet st "st"
struct ${1:`!v Filename('$1_t', 'name')`}
{
	${2:/* data */}
}${3: /* optional variable list */};${4}
endsnippet

# Typedef struct
snippet tds "tds"
typedef struct ${2:_$1 }
{
	${3:/* data */}
} ${1:`!v Filename('$1_t', 'name')`};
endsnippet

# Typdef enum
snippet tde "tde"
typedef enum
{
	${1:/* data */}
} ${2:foo};
endsnippet

# printf
snippet pr "pr"
printf("${1:%s}\n"${2});${3}
endsnippet

snippet fpr "fpr"
fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
endsnippet

# This is kind of convenient
snippet . "."
[${1}]${2}
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet def "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL:code}$0
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char const *argv[])
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet for "for int loop (fori)"
for (${4:size_t} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${0:/* code */}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet do "do...while loop (do)"
do {
	${0:/* code */}
} while(${1:/* condition */});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */})
{
	${0:/* code */}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

# vim:ft=snippets:
