###########################################################################
#                            SnipMate Snippets                            #
###########################################################################
snippet header "header"
" File: ${1:`!v expand('%:t')`}
" Author: ${2:`!v g:snips_author`}
" Description: ${3}
${4:" Last Modified: `!v strftime("%B %d, %Y")`}

$0
endsnippet

snippet gvar "Global / configuration variable"
if !exists("g:${2:`!p snip.rv = snip.basename`${1:_MyVar}}")
	let g:$2 = ${3:"${4:<tab>}"}
endif
endsnippet

snippet guard
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1
$0
endsnippet

snippet f "f"
fun! ${1:`!v expand('%') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\zs.*\ze.vim'),'[/\\]','#','g').'#' : ''`}${2:function_name}(${3})
	${4:" code}
endf
endsnippet

snippet try "try"
try
	${1}
catch ${2}
	${3}
endtry
endsnippet

snippet for "for"
for ${1:needle} in ${2:haystack}
	${3:" code}
endfor
endsnippet

snippet wh "wh"
while ${1:condition}
	${2:" code}
endw
endsnippet

snippet if "if"
if ${1:condition}
	${2:" code}
endif
endsnippet

snippet ife "ife"
if ${1:condition}
	${2}
else
	${3}
endif
endsnippet

snippet com "command" b
command! ${4}-nargs=${1:number_of_args} ${2:name} ${3:command}
endsnippet

snippet log "log"
echomsg ${1}
endsnippet

snippet for "for"
for ${1:needle} in ${2:haystack}
	${3:" code}
endfor
endsnippet

snippet func "function"
" ${3:description}
function! ${1:name}(${2:...})
	${5:" code}
endfunction
endsnippet

snippet au "autocmd"
autocmd ${1:events} ${2:pattern} ${3:command}
endsnippet

snippet au "group"
augroup ${1:AU_NAME}
endsnippet

# vim:ft=snippets:
