#################################
# Snippets for the Lua language #
#################################
global !p
def complete(t, opts):
	if t:
		opts = [ m[len(t):] for m in opts if m.startswith(t) ]
	if len(opts) == 1:
		return opts[0]
	return "(" + "|".join(opts) + ")"

def ifempty(t,iftrue,iffalse):
	if not t or t == "":
		return iftrue
	return iffalse
endglobal

snippet #! "Shebang header" b
#!/usr/bin/env lua
$0
endsnippet

snippet lo "local variable"
local ${1:x} = ${0:1}
endsnippet

snippet fun "function"
function ${1:fname}(${2:...})
	${3:-- body}
end
endsnippet

snippet funa "anonyme function"
function(${1:args}) ${3:return $1.${2:member}} end$0
endsnippet

snippet f "anonyme function"
function(${1:args}) ${3:return $1.${2:member}} end$0
endsnippet

snippet forp "pairs for loop" b
for ${1:k},${2:v} in pairs(${3:table_name}) do
	${4:-- body}
end
endsnippet

snippet fori "ipairs" b
for ${1:i},${2:v} in ipairs(${3:table_name}) do
	${4:-- body}
end
endsnippet

snippet for "numeric for loop" b
for ${1:i}=${2:1},${3:last}`!p snip.rv=ifempty(t[4],'',',')`${4:step} do
	${5:print($1)}
end
endsnippet

snippet rep "repeat ... until"
repeat
	${1:--[[ code ]]}
until ${2:condition}
endsnippet

snippet to "to(string|number)"
to$1`!p snip.rv=complete(t[1],['string','number'])`(${2:var})$0
endsnippet

snippet tsortf "table sort function"
table.sort(${1:tbl}, function(${2:a}, ${3:b})
	${4:--[[ code ]]}
end)
endsnippet

snippet if "if"
if ${1:condition} then
	${2:--[[ code ]]}
end
endsnippet

snippet ass "assert"
assert(${1:test} == ${2:condition}, "${3:errmsg}")
endsnippet

snippet pr "print"
print(${1})
endsnippet

snippet tins "table insert"
${1:tbl}[#$1 + ${3:1}] = ${2:val}${4}
endsnippet

snippet lfun "lfun"
local function ${1:function_name}(${2:args})
	${3:--[[ code ]]}
end
endsnippet

snippet ret "return"
return ${1:true}
endsnippet

snippet req "require"
require "${1:module}"
endsnippet

snippet gmt "getmetatable"
getmetatable(${1:tbl})
endsnippet

snippet smt "setmetatable"
setmetatable(${1:tbl}, ${2:...})
endsnippet

snippet tsort "tsort"
table.sort(${1:tbl}, function(a, b) return a ${2:<} b end)
endsnippet

snippet eli "elseif"
elseif ${3:condition} then
	${4:--[[ code ]]}
endsnippet

snippet el "else"
else
	${1:--[[ code ]]}
endsnippet

snippet -- "block comment"
--[[
${1:comment}
]]
endsnippet

snippet t "t"
${1:a} and ${2:b} or ${3:c}
endsnippet

snippet tcat "table concat"
table.concat(${1:tbl}, ${2:","})
endsnippet

snippet do "do"
do
	${1:--[[ code ]]}
end
endsnippet

snippet wh "while"
while ${1:condition} do
	${2:--[[ code ]]}
end
endsnippet

# vim:ft=snippets:
